<?xml version="1.0" encoding="UTF-8"?>
<TestCase id="Select eGK " xmlns="http://globaltester.org/testspecification" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://globaltester.org/schema/testspecification.xsd">
	<Title>Select ePassport Applictaion</Title>
	<Version>1.00</Version>
	<Purpose>Select ePassport application</Purpose>
	<Profile></Profile>
	<Reference></Reference>
	<Precondition></Precondition>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Perform a cold reset of the card in order to ensure all temporary data is removed</Text>
		</Command>
		<TechnicalCommand>
			print("Reseting chip");
			atr = card.reset(Card.RESET_COLD);
			print ("Answer to Reset (ATR)"+atr);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>The smart card responces with the atr</Text>
			<TechnicalResult>
				assertNotMatchValue("", atr, FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Select eGK DF</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 A4 02 04 02 2F 00 00", HEX);
			fcp = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("62", fcp.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 1</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 01 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 2</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 02 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 3</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 03 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 4</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 04 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 5</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 05 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 6</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 06 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Read record no. 7</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 B2 07 04 00 00 00", HEX);
			rec = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text> </Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("61", rec.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Select DF.ESIGN, the FID returned in record no. 3 (TestStep 5) is used</Text>
		</Command>
		<TechnicalCommand>
			command = new ByteString("00 A4 04 04 0A A0 00 00 01 67 45 53 49 47 4E 00", HEX);
			fcp = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>If DF.ESIGN exist on card the fcp is returned</Text>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE); 
				assertMatchValue("62", fcp.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
</TestCase>