<?xml version="1.0" encoding="UTF-8"?>
<TestCase id="eGK" xmlns="http://globaltester.org/testspecification" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://globaltester.org/schema/testspecification.xsd">
	<Title>Try to select and read records on eGK (elektronische Gesundheitskarte)</Title>
	<Version>1.00</Version>
	<Purpose>Try to select files and read records on the german eGK (elektronische Gesundheitskarte)</Purpose>
	<Profile></Profile>
	<Reference></Reference>
	<Precondition>
		<Command>
			<Text>Reset card</Text>
		</Command>
		<Description>Perform a cold reset of the card in order to ensure all temporary data is removed.</Description>
		<TechnicalCommand>
			card.gt_reset();
		</TechnicalCommand>
	</Precondition>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Select the Master file with a plain select File command, select eGK EF.DIR under MF</Text>
			<APDU sm="false">00 A4 02 04 {{lc} {fid}} 00</APDU>
		</Command>
		<Description>{fid} defines the file ID</Description>
		<TechnicalCommand>
			var command = new ByteString("00 A4 02 04 02 2F 00 00", HEX);
			card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Try to read record no. 1 if exist</Text>
			<APDU sm="false">00 B2 {record number} 04 {le}</APDU>
		</Command>
		<Description>{record number} defines the underlying record no.</Description>
		<TechnicalCommand>
			var command = new ByteString("00 B2 01 04 00", HEX);
			card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Try to read record no. 2 if exist</Text>
			<APDU sm="false">00 B2 {record number} 04 {le}</APDU>
		</Command>
		<Description>{record number} defines the underlying record no.</Description>
		<TechnicalCommand>
			var command = new ByteString("00 B2 02 04 00", HEX);
			card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Try to read record no. 3 if exist</Text>
			<APDU sm="false">00 B2 {record number} 04 {le}</APDU>
		</Command>
		<Description>{record number} defines the underlying record no.</Description>
		<TechnicalCommand>
			var command = new ByteString("00 B2 03 04 00", HEX);
			card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Try to select DF.ESIGN with AID</Text>
			<APDU sm="false">00 A4 04 00 {{lc} {aid}} 00</APDU>
		</Command>
		<Description>{aid} defines the application ID</Description>
		<TechnicalCommand>
			var aid = "A0 00 00 01 67 45 53 49 47 4E";
			card.gt_ISO7816_selectAID(aid);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE); 
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
</TestCase>