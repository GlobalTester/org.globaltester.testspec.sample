<?xml version="1.0" encoding="UTF-8"?>
<TestCase id="Unprotected_Plain_ePassport" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://bsi.bund.de/TR03105 ../schema/TR03105_Part_3_3.xsd">
	<Title>Check if the ePassport is unprotected (PLAIN)</Title>
	<Version>1.00</Version>
	<Purpose>Try to identifying if the ePassport is unprotected (Plain ePassport)</Purpose>
	<Profile></Profile>
	<Reference></Reference>
	<Precondition>
		<Command>
			<Text>Reset card</Text>
		</Command>
		<Description>Perform a cold reset of the card in order to ensure all temporary data is removed.</Description>
		<TechnicalCommand>
			card.gt_reset();
		</TechnicalCommand>
	</Precondition>
	<Precondition>
		<Command>
			<Text>Select the ePassport application with a plain SELECT Application APDU</Text>
		</Command>	
		<TechnicalCommand>
			card.gt_BAC_selectApplicationEPASS();
		</TechnicalCommand>
	</Precondition>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Select file EF.DG1 with {fid}</Text>
			<APDU sm="false">00 A4 02 0C {{lc} {fid}}</APDU>
		</Command>
		<Description>{fid} select file with file ID</Description>
		<Description>Select the file EF.DG1 with a plain SELECT file APDU</Description>
		<TechnicalCommand>
			var ignoreSW = true;
			card.gt_ISO7816_selectFile("01",ignoreSW);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Send plain READ BINARY command to read the first byte of EF.DG1</Text>
			<APDU sm="false">00 B0 00 00 01</APDU>
		</Command>
		<Description>Send READ BINARY command to read first byte of EF.DG1. First byte must be '61' </Description>
		<TechnicalCommand>
			var command = new ByteString("00 B0 00 00 01", HEX);
			var dg1 = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">61 90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
				assertMatchValue("61", dg1, FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Send a plain READ BINARY command to read the first byte of EF.DG2</Text>
			<APDU sm="false">00 B0 82 00 01</APDU>
		</Command>
		<Description>Send READ BINARY command to read first byte of EF.DG2. First byte must be '75'</Description>
		<TechnicalCommand>
			var P1 = "82";
			var P2 = "00";
			var le = "01";
			var command = new ByteString("00 B0 82 00 01", HEX);
			var dg2 = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text></Text>
			<APDU sm="false">75 90 00</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
				assertMatchValue("75", dg2, FAILURE); 
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
</TestCase>