<?xml version="1.0" encoding="UTF-8"?>
<TestCase id="Unprotected_Plain_ePassport" xmlns="http://globaltester.org/testspecification" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://globaltester.org/schema/testspecification.xsd">
	<Title>Check if the ePassport is unprotected (PLAIN)</Title>
	<Version>1.00</Version>
	<Purpose>Try to identifying if the connected ePassport is unprotected (Plain ePassport)</Purpose>
	<Profile></Profile>
	<Reference></Reference>
	<Precondition>
		<Command>
			<Text>Reset card</Text>
		</Command>
		<Description>Perform a cold reset of the card in order to ensure all temporary data is removed.</Description>
		<TechnicalCommand>
			card.gt_reset();
		</TechnicalCommand>
	</Precondition>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Select ePassport application</Text>
			<APDU>00 A4 04 00 {{lc} {aid}} 00</APDU>
		</Command>
		<Description>{aid} defines the application ID</Description>
		<TechnicalCommand>
			var aid = "A0 00 00 02 47 10 01";
			card.gt_ISO7816_selectAID(aid);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>SW 9000</Text>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE); 
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Select file EF.DG1 with file ID</Text>
			<APDU>00 A4 02 0C 02 01 01<APDU>
		</Command>
		<Description>Select the file EF.DG1 with a plain select APDU</Description>
		<TechnicalCommand>
			command = new ByteString("00 A4 02 0C 02 01 01", HEX);
			card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>SW 9000</Text>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE); 
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Send read binary command to read the first byte of EF.DG1</Text>
			<APDU>00 B0 00 00 01<APDU>
		</Command>
		<Description>Send read binary command to read first byte of EF.DG1. First byte must be '61'</Description>
		<TechnicalCommand>
			command = new ByteString("00 B0 00 00 01", HEX);
			var dg1 = card.gt_sendCommand(command);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>61 90 00</Text>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
				assertMatchValue("61", dg1, FAILURE); 
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Send read binary command to read the first byte of EF.DG2</Text>
			<APDU>00 B0 82 00 01<APDU>
		</Command>
		<Description>Send read binary command to read first byte of EF.DG2. First byte must be '75'</Description>
		<TechnicalCommand>
			var P1 = "82";
			var P2 = "00";
			var data = null;
			var le = "01";
			var dg2 = card.gt_ISO7816_readBinary(P1,P2,data,le);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>75 90 00</Text>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
				assertMatchValue("75", dg2, FAILURE); 
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
</TestCase>