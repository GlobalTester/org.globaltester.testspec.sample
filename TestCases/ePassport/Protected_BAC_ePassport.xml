<?xml version="1.0" encoding="UTF-8"?>
<TestCase id="Protected_BAC_ePassport" xmlns="http://globaltester.org/testspecification" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://globaltester.org/schema/testspecification.xsd">
	<Title>Check if the ePassport is BAC protected</Title>
	<Version>1.00</Version>
	<Purpose>Try to identifying if the connected ePassport is a protected BAC ePassport</Purpose>
	<Profile></Profile>
	<Reference></Reference>
	<Precondition>	
		<Text>Perform a cold reset of the card in order to ensure all temporary data is removed</Text>
		<TechnicalCommand>
			card.gt_reset();
		</TechnicalCommand>
	</Precondition>
	<Precondition>
		<Command>
			<Text>Select the ePassport application with a plain SelectApplication APDU</Text>
		</Command>	
		<TechnicalCommand>
			card.gt_BAC_selectApplicationEPASS();
		</TechnicalCommand>
	</Precondition>
	<Precondition>
		<Command>
			<Text>Perform BAC</Text>
		</Command>	
		<TechnicalCommand><![CDATA[
			// ###################################################
			// ## Please input here mrz from your own ePassport ##
			// ###################################################
			var MRZ1 = "P<D<<MUSTERMANN<<ERIKA<<<<<<<<<<<<<<<<<<<<<<";
			var MRZ2 = "C11T002JM4D<<9608122F1310317<<<<<<<<<<<<<<<6";
			var mrz = MRZ1.concat(MRZ2);
			card.gt_BAC_performBAC(mrz);
		]]></TechnicalCommand>
	</Precondition>
	<TestStep>
		<Command xsi:type="APDUCommand">
			<Text>Send read binary command to read first byte of EF.DG2. First byte must be '75'</Text>
			<APDU>00 B0 {fid} 00 {le}</APDU>
		</Command>
		<Description>{fid} defines file id to implicit select and read file</Description>
		<TechnicalCommand>
			var P1 = "82";
			var P2 = "00";
			var data = null;
			var le = "01";
			var dg2 = card.gt_ISO7816_readBinary(P1,P2,data,le);
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>The returning byte MUST be '75'</Text>
			<APDU>75 90 00</APDU>
			<TechnicalResult>
				assertStatusWord(new Array("9000"), card.SW.toString(HEX), FAILURE);
				assertMatchValue("75 90 00", dg2, FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
</TestCase>