<?xml version="1.0" encoding="UTF-8"?>
<TestCase id="Protected_BAC_ePassport" xmlns="http://globaltester.org/testspecification" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://globaltester.org/schema/testspecification.xsd">
	<Title>Check if the ePassport is BAC protected</Title>
	<Version>1.00</Version>
	<Purpose>Try to identifying if the connected ePassport is a protected BAC ePassport</Purpose>
	<Profile></Profile>
	<Reference></Reference>
	<Precondition>	
		<Text>Perform a cold reset of the card in order to ensure all temporary data is removed</Text>
		<TechnicalCommand>
			card.gt_reset();
		</TechnicalCommand>
	</Precondition>
	<Precondition>
		<Command>
			<Text>Select the ePassport application with a plain SelectApplication APDU</Text>
		</Command>	
		<TechnicalCommand>
			card.gt_BAC_selectApplicationEPASS();
		</TechnicalCommand>
	</Precondition>
	<Precondition>
		<Command>
			<Text>Perform BAC</Text>
		</Command>	
		<TechnicalCommand>
			var mrz = card.gt_getCardConfig("ICAO9303","MRZ");
			card.gt_BAC_performBAC(mrz);
		</TechnicalCommand>
	</Precondition>
	<TestStep>
		<Description>Encoded EF.DG2 object in binary format as read from the e-Passport</Description>
		<TechnicalCommand>
			var dg2 = card.gt_ISO7816_readFile("02");
		</TechnicalCommand>
		<ExpectedResult xsi:type="APDUResult">
			<Text>The returning byte MUST be '75'</Text>
			<APDU sm="true">75</APDU>
			<TechnicalResult>
				assertStatusWord(SW_NoError, card.SW.toString(HEX), FAILURE);
				assertMatchValue("75", dg2.bytes(0,1), FAILURE);
			</TechnicalResult>
		</ExpectedResult>
	</TestStep>
</TestCase>